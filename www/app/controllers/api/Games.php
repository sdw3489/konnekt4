<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . 'core/MY_REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Games extends MY_REST_Controller {

    protected $models = array('Game', 'Stat');

    function __construct()
    {
        // Construct the parent class
        parent::__construct();


        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        // $this->methods['index_get']['limit'] = 500; // 500 requests per hour per index/key
        // $this->methods['index_post']['limit'] = 100; // 100 requests per hour per index/key
        // $this->methods['index_delete']['limit'] = 50; // 50 requests per hour per index/key
    }

    public function index_get()
    {
        // games from a data store e.g. database
        $id = $this->get('id');
        $results = $this->Game->get_all();
        $this->get_response($id, $results);
    }

    public function index_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function index_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the Game'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

    //get a list of the game challenges
    public function challenges_get()
    {
        $results = $this->Game->getChallenges($this->session_id);

        // Check if the games data store contains games (in case the database result returns NULL)
        if ($results)
        {
            // Set the response and exit
            $this->response($results, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            // Set the response and exit
            $this->response([
                'status' => FALSE,
                'message' => 'No games were found'
            ], REST_Controller::HTTP_OK); // NOT_FOUND (404) being the HTTP response code
        }

    }

    // Create New Game
    public function new_post()
    {
        $id = $this->post('id');
        $results = $this->Game->newGame($this->session_id, $id);

        $message = [
            'id' => $results, // Automatically generated by the model
            'message' => 'Created a Game'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED);
    }

    // Get the last move played
    public function last_move_get()
    {
        $id = $this->get('id');
        $results = $this->Game->fields('id, last_move')->get_all();
        $this->get_response($id, $results);
    }

    // Update the last move played
    public function last_move_post()
    {
        $id = $this->post('id');
        $data = array(
            'last_move' => $this->post('last_move')
        );
        $results = $this->Game->where('id', $id)->update($data);

        $message = [
            'id' => $results, // Automatically generated by the model
            'data' => $data,
            'message' => 'Updated Last Move'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED);
    }

    // Get the entire board state
    public function board_get()
    {
        $id = $this->get('id');
        $results = $this->Game->fields('id, board')->get_all();
        $this->get_response($id, $results);
    }

    // Update the entire board state
    public function board_post()
    {
        $id = $this->post('id');
        $data = array(
            'board' => $this->post('board')
        );
        $results = $this->Game->where('id', $id)->update($data);

        $message = [
            'id' => $results, // Automatically generated by the model
            'data' => $data,
            'message' => 'Updated Board'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED);
    }

    // Get whose turn it is
    public function turn_get()
    {
        $id = $this->get('id');
        $results = $this->Game->fields('id, whose_turn')->get_all();
        $this->get_response($id, $results);
    }

    // Update whose turn it is
    public function turn_post()
    {
        $id = $this->post('id');
        $results = $this->Game->changeTurn($id);

        $message = [
            'id' => $id, // Automatically generated by the model
            'message' => 'Updated Turn'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED);

    }

    // Get the game players
    public function players_get()
    {
        $id = $this->get('id');
    }

    // End game
    public function end_post()
    {
        $id = $this->post('id');
        $data = $this->input->post('data');
        $this->Stat->update_stats($data);
        $update = array(
            'active'=>0,
            'end_type'=> $data['end_type'],
            'winner_id'=> $data['winner']['id'],
            'loser_id'=> $data['loser']['id']
        );
        $results = $this->Game->where('id', $id)->update($update);

        $message = [
            'id' => $id, // Automatically generated by the model
            'rows' => $results,
            'data' => $data,
            'message' => 'Ended Game'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED);

    }

}
